
openapi: 3.0.2

info:
  title: Conduit API
  description: Conduit API
  version: 1.0.0
  contact:
    name: RealWorld
    url: https://realworld.io
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: /api

paths:

  /users:
    post:
      tags: [ User and Authentication ]
      summary: Register a new user
      requestBody:
        description: Details of the new user to register.
        required: true
        content:
          application/json:
            schema:
              required: [ user ]
              example:
                user:
                  username: jake
                  email: jake@jake.jake
                  password: jakejake
              properties:
                user:
                  required: [ email, password, username ]
                  properties:
                    username: { type: string }
                    email: { type: string }
                    password: { type: string, format: password }
      responses:
        201:
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserResponse' }
        422: { $ref: '#/components/responses/422' }

  /users/login:
    post:
      tags: [ User and Authentication ]
      summary: Existing user login
      requestBody:
        description: Credentials to use.
        required: true
        content:
          application/json:
            schema:
              example:
                user:
                  email: jake@jake.jake
                  password: jakejake
              required: [ user ]
              properties:
                user:
                  required: [ email, password ]
                  properties:
                    email: { type: string }
                    password: { type: string, format: password }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserResponse' }
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }

  /user:
    get:
      tags: [ User and Authentication ]
      summary: Get current user
      description: Gets the currently logged-in user.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserResponse' }
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]

    put:
      tags: [ User and Authentication ]
      summary: Update current user
      description: Update user information for current user.
      requestBody:
        description: User details to update. At least **one** field is required.
        required: true
        content:
          application/json:
            schema:
              example:
                user:
                  email: jake@jake.jake
                  bio: I like to skateboard
                  image: https://i.stack.imgur.com/xHWG8.jpg
              required: [ user ]
              properties:
                user:
                  properties:
                    email: { type: string }
                    bio: { type: string }
                    password: { type: string }
                    image: { type: string }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserResponse' }
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]

  /profiles/{username}:
    get:
      tags: [ Profile ]
      summary: Get a profile
      description: Get a profile of a user of the system. Auth is optional.
      parameters:
        - $ref: '#/components/parameters/username'
          description: Username of the profile to get.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }

  /profiles/{username}/follow:
    post:
      tags: [ Profile ]
      summary: Follow a user
      description: Follow a user by username.
      parameters:
        - $ref: '#/components/parameters/username'
          description: Username of the profile you want to follow.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]
    delete:
      tags: [ Profile ]
      summary: Unfollow a user
      description: Unfollow a user by username.
      parameters:
        - $ref: '#/components/parameters/username'
          description: Username of the profile you want to unfollow.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]

  /articles/feed:
    get:
      tags:
        - Articles
      summary: Get recent articles from users you follow
      description: Get most recent articles from users you follow. Use query parameters
        to limit. Auth is required
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleArticlesResponse'
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]

  /articles:
    get:
      tags:
        - Articles
      summary: Get recent articles globally
      description: Get most recent articles globally. Use query parameters to filter
        results. Auth is optional
      parameters:
        - name: tag
          in: query
          description: Filter by tag
          schema:
            type: string
        - name: author
          in: query
          description: Filter by author (username)
          schema:
            type: string
        - name: favorited
          in: query
          description: Filter by favorites of a user (username)
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleArticlesResponse'
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
    post:
      tags:
        - Articles
      summary: Create an article
      description: Create an article. Auth is required
      requestBody:
        description: Article to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewArticleRequest'
        required: true
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]

  /articles/{slug}:
    get:
      tags:
        - Articles
      summary: Get an article
      description: Get an article. Auth not required
      parameters:
        - $ref: '#/components/parameters/slug'
          description: Slug of the article to get.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        422: { $ref: '#/components/responses/422' }
    put:
      tags:
        - Articles
      summary: Update an article
      description: Update an article. Auth is required
      parameters:
        - $ref: '#/components/parameters/slug'
          description: Slug of the article to update.
      requestBody:
        description: Article to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]
    delete:
      tags:
        - Articles
      summary: Delete an article
      description: Delete an article. Auth is required
      parameters:
        - $ref: '#/components/parameters/slug'
          description: Slug of the article to delete.
      responses:
        200:
          description: OK
          content: {}
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]

  /articles/{slug}/comments:
    get:
      tags:
        - Comments
      summary: Get comments for an article
      description: Get the comments for an article. Auth is optional
      parameters:
        - $ref: '#/components/parameters/slug'
          description: Slug of the article that you want to get comments for.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleCommentsResponse'
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
    post:
      tags:
        - Comments
      summary: Create a comment for an article
      description: Create a comment for an article. Auth is required
      parameters:
        - $ref: '#/components/parameters/slug'
          description: Slug of the article that you want to create a comment for.
      requestBody:
        description: Comment you want to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCommentRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCommentResponse'
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]

  /articles/{slug}/comments/{id}:
    delete:
      tags:
        - Comments
      summary: Delete a comment for an article
      description: Delete a comment for an article. Auth is required
      parameters:
        - $ref: '#/components/parameters/slug'
          description: Slug of the article that you want to delete a comment for.
        - name: id
          in: path
          description: ID of the comment you want to delete
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content: {}
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]

  /articles/{slug}/favorite:
    post:
      tags:
        - Favorites
      summary: Favorite an article
      description: Favorite an article. Auth is required
      parameters:
        - $ref: '#/components/parameters/slug'
          description: Slug of the article that you want to favorite.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]
    delete:
      tags:
        - Favorites
      summary: Unfavorite an article
      description: Unfavorite an article. Auth is required
      parameters:
        - name: slug
          in: path
          description: Slug of the article that you want to unfavorite
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        401: { $ref: '#/components/responses/401' }
        422: { $ref: '#/components/responses/422' }
      security: [ Token: [] ]

  /tags:
    get:
      tags: [ Tags ]
      summary: Get tags
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'
        422: { $ref: '#/components/responses/422' }

components:

  parameters:

    username:
      name: username
      in: path
      required: true
      schema:
        type: string

    slug:
      name: slug
      in: path
      required: true
      schema:
        type: string

    limit:
      name: limit
      in: query
      description: Limit number of articles returned (default is 20)
      schema:
        type: integer
        default: 20

    offset:
      name: offset
      in: query
      description: Offset/skip number of articles (default is 0)
      schema:
        type: integer
        default: 0

  schemas:
    UpdateArticle:
      properties:
        title:
          type: string
        description:
          type: string
        body:
          type: string
    SingleCommentResponse:
      required: [ comment ]
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
    UpdateArticleRequest:
      required: [ article ]
      properties:
        article:
          $ref: '#/components/schemas/UpdateArticle'
    Comment:
      required: [ author, body, createdAt, id, updatedAt ]
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        body:
          type: string
        author:
          $ref: '#/components/schemas/Profile'
    User:
      example:
        email: "jake@jake.jake"
        token: "jwt.token.here"
        username: "jake"
        bio: "I work at statefarm"
        image: null
      required: [ bio, email, image, token, username ]
      properties:
        email:
          type: string
        token:
          type: string
        username:
          type: string
        bio:
          type: string
        image:
          type: string
    SingleArticleResponse:
      required: [ article ]
      properties:
        article:
          $ref: '#/components/schemas/Article'
    MultipleArticlesResponse:
      required: [ articles, articlesCount ]
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        articlesCount:
          type: integer
    Article:
      required:
        - author
        - body
        - createdAt
        - description
        - favorited
        - favoritesCount
        - slug
        - tagList
        - title
        - updatedAt
      properties:
        slug:
          type: string
        title:
          type: string
        description:
          type: string
        body:
          type: string
        tagList:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        favorited:
          type: boolean
        favoritesCount:
          type: integer
        author:
          $ref: '#/components/schemas/Profile'
    NewArticle:
      required: [ body, description, title ]
      properties:
        title:
          type: string
        description:
          type: string
        body:
          type: string
        tagList:
          type: array
          items:
            type: string
    NewCommentRequest:
      required: [ comment ]
      properties:
        comment:
          $ref: '#/components/schemas/NewComment'
    ProfileResponse:
      required: [ profile ]
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
    Profile:
      required: [ bio, following, image, username ]
      properties:
        username:
          type: string
        bio:
          type: string
        image:
          type: string
        following:
          type: boolean
    UserResponse:
      example:
        user:
          email: "jake@jake.jake"
          token: "jwt.token.here"
          username: "jake"
          bio: "I work at statefarm"
          image: null
      required: [ user ]
      properties:
        user:
          $ref: '#/components/schemas/User'
    NewComment:
      required: [ body ]
      properties:
        body:
          type: string
    MultipleCommentsResponse:
      required: [ comments ]
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    TagsResponse:
      required: [ tags ]
      properties:
        tags:
          type: array
          items:
            type: string
    NewArticleRequest:
      required: [ article ]
      properties:
        article:
          $ref: '#/components/schemas/NewArticle'

  responses:
    422:
      description: Unexpected error
      content:
        application/json:
          schema:
            required: [ errors ]
            properties:
              errors:
                required: [ body ]
                properties:
                  body:
                    type: array
                    items:
                      type: string

    401:
      description: Unauthorized

    403:
      description: Forbidden

    404:
      description: Not Found

  securitySchemes:
    Token:
      type: apiKey
      name: Authorization
      in: header
      description: |
        For accessing the protected API resources, you must have received a a valid JWT token after
        registering or logging in. This JWT token must then be used for all protected resources by
        passing it in via the 'Authorization' header.

        A JWT token is generated by the API by either registering via /users or logging in via
        /users/login.

        The following format must be in the 'Authorization' header

            Token xxxxxx.yyyyyyy.zzzzzz
